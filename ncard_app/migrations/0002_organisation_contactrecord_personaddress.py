# Generated by Django 4.1 on 2022-08-22 11:26

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [('ncard_app', '0002_organisation_contactrecord_clinician_and_more'), ('ncard_app', '0003_alter_personaddress_person'), ('ncard_app', '0004_contactrecord_ncard_app_c_person__994b8d_idx_and_more')]

    dependencies = [
        ('ncard_app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='clinician',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='cre_role',
            field=models.CharField(blank=True, max_length=15, verbose_name='CRE role'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='display_on_website',
            field=models.IntegerField(choices=[(0, 'No'), (1, 'Yes'), (2, 'Yes - student')], default=0),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='email2',
            field=models.EmailField(blank=True, max_length=254, verbose_name='email 2'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='google_scholar',
            field=models.URLField(blank=True, verbose_name='Google Scholar'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='linkedin',
            field=models.URLField(blank=True, verbose_name='LinkedIn'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='location',
            field=models.CharField(blank=True, max_length=50),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='loop_profile',
            field=models.URLField(blank=True, verbose_name='Loop profile'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='ncard_relation',
            field=models.IntegerField(choices=[(1, 'Core team'), (2, 'Affiliate'), (3, 'Collaborator'), (4, 'Community / Consumer'), (5, 'Advocate'), (6, 'Govt / Industry'), (0, 'Other')], default=0, verbose_name='relationship with NCARD'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='notes',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='orcid_id',
            field=models.CharField(blank=True, max_length=37, validators=[django.core.validators.RegexValidator('^$|^https://orcid\\.org/\\d{4}-\\d{4}-\\d{4}-\\d{3}(\\d|X)$', 'ORCID identifier must be a full URL, in this format: https://orcid.org/XXXX-XXXX-XXXX-XXXX')], verbose_name='ORCID iD'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='phone_home',
            field=models.CharField(blank=True, max_length=25, validators=[django.core.validators.RegexValidator('^[ 0-9()+-]*$', 'Phone numbers must contain only these characters: ()+-0123456789')], verbose_name='phone (home)'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='phone_mobile',
            field=models.CharField(blank=True, max_length=25, validators=[django.core.validators.RegexValidator('^[ 0-9()+-]*$', 'Phone numbers must contain only these characters: ()+-0123456789')], verbose_name='phone (mobile)'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='phone_office',
            field=models.CharField(blank=True, max_length=25, validators=[django.core.validators.RegexValidator('^[ 0-9()+-]*$', 'Phone numbers must contain only these characters: ()+-0123456789')], verbose_name='phone (office)'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='profile_url',
            field=models.URLField(blank=True, verbose_name='profile URL'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='project',
            field=models.CharField(blank=True, max_length=50),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='research_focus',
            field=models.CharField(blank=True, max_length=255),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='researchgate',
            field=models.URLField(blank=True, verbose_name='ResearchGate'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='scopus_id',
            field=models.BigIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, 'Value must not be negative.')], verbose_name='Scopus ID'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='twitter',
            field=models.CharField(blank=True, max_length=16, validators=[django.core.validators.RegexValidator('^$|^@[A-Za-z0-9_]+$', 'Twitter handle must begin with an @ and only contain letters, digits and underscores.')], verbose_name='Twitter handle'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='wos_researcher_id',
            field=models.CharField(blank=True, max_length=32, verbose_name='WoS ResearcherID'),
        ),
        migrations.AlterField(
            model_name='contactrecord',
            name='email',
            field=models.EmailField(blank=True, max_length=254, verbose_name='email'),
        ),
        migrations.AlterField(
            model_name='contactrecord',
            name='person',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='contact', to='ncard_app.person'),
        ),
        migrations.CreateModel(
            name='PersonAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Home'), (2, 'Work')])),
                ('line1', models.CharField(max_length=64, verbose_name='line 1')),
                ('line2', models.CharField(blank=True, max_length=64, verbose_name='line 2')),
                ('line3', models.CharField(blank=True, max_length=64, verbose_name='line 3')),
                ('suburb', models.CharField(blank=True, max_length=32)),
                ('state', models.CharField(blank=True, max_length=3, verbose_name='state (abbrev.)')),
                ('postcode', models.CharField(max_length=20)),
                ('country', models.CharField(choices=[('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua & Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BA', 'Bosnia & Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('GB', 'Britain (UK)'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('BQ', 'Caribbean NL'), ('KY', 'Cayman Islands'), ('CF', 'Central African Rep.'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CD', 'Congo (Dem. Rep.)'), ('CG', 'Congo (Rep.)'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('CI', "Côte d'Ivoire"), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('TL', 'East Timor'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('SZ', 'Eswatini (Swaziland)'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern & Antarctic Lands'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island & McDonald Islands'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', 'Korea (North)'), ('KR', 'Korea (South)'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', 'Laos'), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macau'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar (Burma)'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MK', 'North Macedonia'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestine'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RO', 'Romania'), ('RU', 'Russia'), ('RW', 'Rwanda'), ('RE', 'Réunion'), ('AS', 'Samoa (American)'), ('WS', 'Samoa (western)'), ('SM', 'San Marino'), ('ST', 'Sao Tome & Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia & the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('BL', 'St Barthelemy'), ('SH', 'St Helena'), ('KN', 'St Kitts & Nevis'), ('LC', 'St Lucia'), ('SX', 'St Maarten (Dutch)'), ('MF', 'St Martin (French)'), ('PM', 'St Pierre & Miquelon'), ('VC', 'St Vincent'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard & Jan Mayen'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syria'), ('TW', 'Taiwan'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania'), ('TH', 'Thailand'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad & Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks & Caicos Is'), ('TV', 'Tuvalu'), ('UM', 'US minor outlying islands'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VA', 'Vatican City'), ('VE', 'Venezuela'), ('VN', 'Vietnam'), ('VG', 'Virgin Islands (UK)'), ('VI', 'Virgin Islands (US)'), ('WF', 'Wallis & Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'), ('AX', 'Åland Islands')], default='AU', max_length=2)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='ncard_app.contactrecord')),
            ],
            options={
                'verbose_name': 'address',
                'verbose_name_plural': 'addresses',
            },
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='employers',
            field=models.ManyToManyField(blank=True, to='ncard_app.organisation'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='organisation_other',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_records_other', to='ncard_app.organisation', verbose_name='organisation (other)'),
        ),
        migrations.AddField(
            model_name='contactrecord',
            name='organisation_primary',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_records_primary', to='ncard_app.organisation', verbose_name='organisation (primary)'),
        ),
        migrations.AddIndex(
            model_name='personaddress',
            index=models.Index(fields=['person', 'type'], name='ncard_app_p_person__eee929_idx'),
        ),
        migrations.AddConstraint(
            model_name='personaddress',
            constraint=models.UniqueConstraint(fields=('person', 'type'), name='address_unique_person_type'),
        ),
        migrations.AlterField(
            model_name='personaddress',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='ncard_app.person'),
        ),
        migrations.AddIndex(
            model_name='contactrecord',
            index=models.Index(fields=['person'], name='ncard_app_c_person__994b8d_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['surname'], name='ncard_app_p_surname_4edca3_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['given_name'], name='ncard_app_p_given_n_7cc51c_idx'),
        ),
    ]
